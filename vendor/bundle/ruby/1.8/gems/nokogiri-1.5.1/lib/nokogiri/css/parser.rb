#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'nokogiri/css/parser_extras'
module Nokogiri
  module CSS
    class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    13,    22,    47,    48,    21,    46,    84,    23,    13,    11,
    12,    83,    21,    23,    66,    43,    16,    11,    86,    14,
    21,    79,    12,    77,    15,     7,     9,    14,    16,    82,
    12,    13,    15,     7,     9,    21,    16,    78,    12,    13,
    11,     7,    85,    21,    16,    80,    47,    51,    11,    50,
    14,    83,    21,    12,    21,    15,     7,     9,    14,    16,
    27,    12,    21,    15,     7,     9,    21,    16,    87,    27,
    12,    11,    12,     7,    21,     7,    16,    59,    16,    21,
    12,    89,    13,     7,    12,    13,    16,     7,     9,   -24,
    16,    11,    12,    42,    54,     7,    92,    12,    16,    39,
     7,    14,    94,    16,    14,    38,    15,    74,    75,    15,
    91,    90,    74,    75,    47,    51,    27,    50,    70,    71,
    72,    97,    73,    70,    71,    72,    69,    73,    31,    32,
    34,    69,    47,    51,    98,    50,    47,    51,    33,    50,
    36,    35,    81,    80 ]

racc_action_check = [
     0,     1,    13,    13,     0,    13,    48,    52,    37,     0,
     4,    48,    37,     1,    39,    13,     4,    37,    52,     0,
    63,    45,     0,    42,     0,     0,     0,    37,     0,    47,
    37,    23,    37,    37,    37,    23,    37,    44,    63,    15,
    23,    63,    49,    15,    63,    50,    14,    14,    15,    14,
    23,    51,    19,    23,     3,    23,    23,    23,    15,    23,
    25,    15,    18,    15,    15,    15,    27,    15,    62,     3,
    19,    27,     3,    19,    17,     3,    19,    22,     3,    20,
    18,    67,    12,    18,    27,    16,    18,    27,    27,    11,
    27,    12,    17,    12,    16,    17,    76,    20,    17,    10,
    20,    12,    81,    20,    16,     7,    12,    40,    40,    16,
    68,    68,    41,    41,    83,    83,     5,    83,    40,    40,
    40,    84,    40,    41,    41,    41,    40,    41,     6,     6,
     6,    41,    82,    82,    94,    82,    80,    80,     6,    80,
     6,     6,    46,    46 ]

racc_action_pointer = [
    -2,     1,   nil,    48,   -14,    95,   121,    94,   nil,   nil,
    70,    60,    80,    -8,    36,    37,    83,    68,    56,    46,
    73,   nil,    77,    29,   nil,    39,   nil,    60,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,     3,
   104,   109,    -2,   nil,    14,    -2,   131,    17,    -1,    19,
    33,    39,    -5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,    14,   nil,   nil,   nil,    56,   100,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    71,   nil,   nil,   nil,
   126,    95,   122,   104,   108,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   121,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -25,   -70,    -2,   -46,   -12,   -16,   -18,   -70,   -20,   -21,
   -70,   -23,   -25,   -70,   -70,   -25,   -70,   -51,   -52,   -53,
   -54,   -55,   -70,   -25,    -9,   -45,   -11,   -25,   -13,   -14,
   -15,    -3,    -4,    -5,    -6,    -7,    -8,   -25,   -19,   -70,
   -58,   -58,   -70,   -29,   -70,   -70,   -37,   -38,   -39,   -70,
   -37,   -39,   -70,   -43,   -44,   -47,   -48,   -49,   -50,    99,
    -1,   -10,   -70,   -67,   -69,   -17,   -22,   -70,   -70,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -28,   -30,   -31,
   -70,   -42,   -70,   -70,   -70,   -32,   -33,   -66,   -68,   -26,
   -56,   -57,   -27,   -34,   -70,   -35,   -36,   -41,   -40 ]

racc_goto_table = [
    44,    49,    25,    26,    40,    30,     1,    41,    60,    67,
    76,    53,    28,    29,    63,    24,    55,    56,    57,    58,
    37,    52,    65,    45,    62,    61,    64,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    88,   nil,   nil,   nil,   nil,    93,   nil,    95,
    96 ]

racc_goto_check = [
    16,    16,     7,     8,    13,     8,     1,     9,     2,    15,
    15,     9,    10,    11,     5,     6,     7,     7,     7,     7,
     3,     1,     2,    17,    20,     8,     7,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     7,   nil,   nil,   nil,   nil,    16,   nil,    16,
    16 ]

racc_goto_pointer = [
   nil,     6,   -15,    14,   nil,   -13,    12,    -1,     0,    -5,
     8,     9,   nil,    -8,   nil,   -31,   -13,    10,   nil,   nil,
    -3 ]

racc_goto_default = [
   nil,   nil,     2,   nil,     6,     3,   nil,     5,   nil,     4,
    20,    19,    18,     8,    10,   nil,   nil,   nil,    17,    68,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 32, :_reduce_1,
  1, 32, :_reduce_2,
  1, 34, :_reduce_3,
  1, 34, :_reduce_4,
  1, 34, :_reduce_5,
  1, 34, :_reduce_6,
  1, 34, :_reduce_7,
  1, 34, :_reduce_8,
  2, 35, :_reduce_9,
  3, 35, :_reduce_10,
  2, 35, :_reduce_11,
  1, 35, :_reduce_none,
  2, 35, :_reduce_13,
  2, 35, :_reduce_14,
  2, 35, :_reduce_15,
  1, 35, :_reduce_16,
  3, 33, :_reduce_17,
  1, 33, :_reduce_none,
  2, 43, :_reduce_19,
  1, 36, :_reduce_none,
  1, 36, :_reduce_21,
  3, 44, :_reduce_22,
  1, 44, :_reduce_23,
  1, 45, :_reduce_24,
  0, 45, :_reduce_none,
  4, 42, :_reduce_26,
  4, 42, :_reduce_27,
  3, 42, :_reduce_28,
  2, 40, :_reduce_29,
  3, 40, :_reduce_30,
  3, 40, :_reduce_31,
  3, 40, :_reduce_32,
  3, 40, :_reduce_33,
  3, 47, :_reduce_34,
  3, 47, :_reduce_35,
  3, 47, :_reduce_36,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_39,
  4, 48, :_reduce_40,
  3, 48, :_reduce_41,
  2, 48, :_reduce_42,
  2, 41, :_reduce_43,
  2, 41, :_reduce_44,
  1, 37, :_reduce_none,
  0, 37, :_reduce_none,
  2, 38, :_reduce_47,
  2, 38, :_reduce_48,
  2, 38, :_reduce_49,
  2, 38, :_reduce_50,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 49, :_reduce_55,
  2, 46, :_reduce_56,
  2, 46, :_reduce_57,
  0, 46, :_reduce_none,
  1, 50, :_reduce_59,
  1, 50, :_reduce_60,
  1, 50, :_reduce_61,
  1, 50, :_reduce_62,
  1, 50, :_reduce_63,
  1, 50, :_reduce_64,
  1, 50, :_reduce_65,
  3, 39, :_reduce_66,
  1, 51, :_reduce_none,
  2, 51, :_reduce_none,
  1, 51, :_reduce_none ]

racc_reduce_n = 70

racc_shift_n = 99

racc_token_table = {
  false => 0,
  :error => 1,
  :FUNCTION => 2,
  :INCLUDES => 3,
  :DASHMATCH => 4,
  :LBRACE => 5,
  :HASH => 6,
  :PLUS => 7,
  :GREATER => 8,
  :S => 9,
  :STRING => 10,
  :IDENT => 11,
  :COMMA => 12,
  :NUMBER => 13,
  :PREFIXMATCH => 14,
  :SUFFIXMATCH => 15,
  :SUBSTRINGMATCH => 16,
  :TILDE => 17,
  :NOT_EQUAL => 18,
  :SLASH => 19,
  :DOUBLESLASH => 20,
  :NOT => 21,
  :EQUAL => 22,
  :RPAREN => 23,
  :LSQUARE => 24,
  :RSQUARE => 25,
  :HAS => 26,
  "." => 27,
  "*" => 28,
  "|" => 29,
  ":" => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FUNCTION",
  "INCLUDES",
  "DASHMATCH",
  "LBRACE",
  "HASH",
  "PLUS",
  "GREATER",
  "S",
  "STRING",
  "IDENT",
  "COMMA",
  "NUMBER",
  "PREFIXMATCH",
  "SUFFIXMATCH",
  "SUBSTRINGMATCH",
  "TILDE",
  "NOT_EQUAL",
  "SLASH",
  "DOUBLESLASH",
  "NOT",
  "EQUAL",
  "RPAREN",
  "LSQUARE",
  "RSQUARE",
  "HAS",
  "\".\"",
  "\"*\"",
  "\"|\"",
  "\":\"",
  "$start",
  "selector",
  "simple_selector_1toN",
  "combinator",
  "simple_selector",
  "element_name",
  "hcap_0toN",
  "hcap_1toN",
  "negation",
  "function",
  "pseudo",
  "attrib",
  "class",
  "namespaced_ident",
  "namespace",
  "attrib_val_0or1",
  "expr",
  "an_plus_b",
  "attribute_id",
  "eql_incl_dash",
  "negation_arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
        result = [val.first, val.last].flatten
      
    result
end

def _reduce_2(val, _values, result)
 result = val.flatten 
    result
end

def _reduce_3(val, _values, result)
 result = :DIRECT_ADJACENT_SELECTOR 
    result
end

def _reduce_4(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_5(val, _values, result)
 result = :PRECEDING_SELECTOR 
    result
end

def _reduce_6(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_7(val, _values, result)
 result = :DESCENDANT_SELECTOR 
    result
end

def _reduce_8(val, _values, result)
 result = :CHILD_SELECTOR 
    result
end

def _reduce_9(val, _values, result)
        result =  if val[1].nil?
                    val.first
                  else
                    Node.new(:CONDITIONAL_SELECTOR, [val.first, val[1]])
                  end
      
    result
end

def _reduce_10(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            val.first,
            Node.new(:COMBINATOR, [val[1], val.last])
          ]
        )
      
    result
end

def _reduce_11(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

# reduce 12 omitted

def _reduce_13(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_14(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR, val)
      
    result
end

def _reduce_15(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [
            Node.new(:ELEMENT_NAME, ['*']),
            Node.new(:COMBINATOR, val)
          ]
        )
      
    result
end

def _reduce_16(val, _values, result)
        result = Node.new(:CONDITIONAL_SELECTOR,
          [Node.new(:ELEMENT_NAME, ['*']), val.first]
        )
      
    result
end

def _reduce_17(val, _values, result)
        result = Node.new(val[1], [val.first, val.last])
      
    result
end

# reduce 18 omitted

def _reduce_19(val, _values, result)
 result = Node.new(:CLASS_CONDITION, [val[1]]) 
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
 result = Node.new(:ELEMENT_NAME, val) 
    result
end

def _reduce_22(val, _values, result)
        result = Node.new(:ELEMENT_NAME,
          [[val.first, val.last].compact.join(':')]
        )
      
    result
end

def _reduce_23(val, _values, result)
        name = @namespaces.key?('xmlns') ? "xmlns:#{val.first}" : val.first
        result = Node.new(:ELEMENT_NAME, [name])
      
    result
end

def _reduce_24(val, _values, result)
 result = val[0] 
    result
end

# reduce 25 omitted

def _reduce_26(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_27(val, _values, result)
        result = Node.new(:ATTRIBUTE_CONDITION,
          [val[1]] + (val[2] || [])
        )
      
    result
end

def _reduce_28(val, _values, result)
        # Non standard, but hpricot supports it.
        result = Node.new(:PSEUDO_CLASS,
          [Node.new(:FUNCTION, ['nth-child(', val[1]])]
        )
      
    result
end

def _reduce_29(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip])
      
    result
end

def _reduce_30(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_31(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_32(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_33(val, _values, result)
        result = Node.new(:FUNCTION, [val.first.strip, val[1]].flatten)
      
    result
end

def _reduce_34(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_35(val, _values, result)
 result = [val.first, val.last] 
    result
end

def _reduce_36(val, _values, result)
 result = [val.first, val.last] 
    result
end

# reduce 37 omitted

# reduce 38 omitted

def _reduce_39(val, _values, result)
        if val[0] == 'even'
          val = ["2","n","+","0"]
          result = Node.new(:AN_PLUS_B, val)
        elsif val[0] == 'odd'
          val = ["2","n","+","1"]
          result = Node.new(:AN_PLUS_B, val)
        else
          # This is not CSS standard.  It allows us to support this:
          # assert_xpath("//a[foo(., @href)]", @parser.parse('a:foo(@href)'))
          # assert_xpath("//a[foo(., @a, b)]", @parser.parse('a:foo(@a, b)'))
          # assert_xpath("//a[foo(., a, 10)]", @parser.parse('a:foo(a, 10)'))
          result = val
        end
      
    result
end

def _reduce_40(val, _values, result)
        if val[1] == 'n'
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_41(val, _values, result)
               # n+3, -n+3
        if val[0] == 'n'
          val.unshift("1")
          result = Node.new(:AN_PLUS_B, val)
        elsif val[0] == '-n'
          val[0] = 'n'
          val.unshift("-1")
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_42(val, _values, result)
        if val[1] == 'n'
          val << "+"
          val << "0"
          result = Node.new(:AN_PLUS_B, val)
        else
          raise Racc::ParseError, "parse error on IDENT '#{val[1]}'"
        end
      
    result
end

def _reduce_43(val, _values, result)
        result = Node.new(:PSEUDO_CLASS, [val[1]])
      
    result
end

def _reduce_44(val, _values, result)
 result = Node.new(:PSEUDO_CLASS, [val[1]]) 
    result
end

# reduce 45 omitted

# reduce 46 omitted

def _reduce_47(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_48(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_49(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

def _reduce_50(val, _values, result)
        result = Node.new(:COMBINATOR, val)
      
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

def _reduce_55(val, _values, result)
 result = Node.new(:ID, val) 
    result
end

def _reduce_56(val, _values, result)
 result = [val.first, val[1]] 
    result
end

def _reduce_57(val, _values, result)
 result = [val.first, val[1]] 
    result
end

# reduce 58 omitted

def _reduce_59(val, _values, result)
 result = :equal 
    result
end

def _reduce_60(val, _values, result)
 result = :prefix_match 
    result
end

def _reduce_61(val, _values, result)
 result = :suffix_match 
    result
end

def _reduce_62(val, _values, result)
 result = :substring_match 
    result
end

def _reduce_63(val, _values, result)
 result = :not_equal 
    result
end

def _reduce_64(val, _values, result)
 result = :includes 
    result
end

def _reduce_65(val, _values, result)
 result = :dash_match 
    result
end

def _reduce_66(val, _values, result)
        result = Node.new(:NOT, [val[1]])
      
    result
end

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module CSS
  end   # module Nokogiri
